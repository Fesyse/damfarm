"use client"

import {
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Progress } from "@/components/ui/progress"
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
  CardDescription,
} from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { useGameStore } from "@/store/game-store"
import { useState } from "react"
import { Carrot, Hand } from "lucide-react"
import {
  TooltipProvider,
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from "@/components/ui/tooltip"
import { toast } from "sonner"
import { AnimalType, ResoursesType } from "@/types/store"

const animalEmoji = {
  cow: "üêÑ",
  chicken: "üêî",
  sheep: "üêë",
  pig: "üêñ",
  rabbit: "üêá",
  horse: "üêé",
}

const animalProduct = {
  milk: "–ú–æ–ª–æ–∫–æ",
  eggs: "–Ø–π—Ü–∞",
  wool: "–®–µ—Ä—Å—Ç—å",
  meat: "–ú—è—Å–æ",
}

const animalName = {
  cow: "–ö–æ—Ä–æ–≤–∞",
  chicken: "–ö—É—Ä–∏—Ü–∞",
  sheep: "–û–≤—Ü–∞",
  pig: "–°–≤–∏–Ω—å—è",
  rabbit: "–ö—Ä–æ–ª–∏–∫",
  horse: "–õ–æ—à–∞–¥—å",
}

export const animalFeedResource: Record<
  AnimalType["type"],
  keyof ResoursesType
> = {
  cow: "wheat",
  chicken: "wheat",
  sheep: "wheat",
  pig: "carrot",
  rabbit: "carrot",
  horse: "carrot",
}

const resourceName = {
  wheat: "–ø—à–µ–Ω–∏—Ü–µ–π",
  carrot: "–º–æ—Ä–∫–æ–≤—å—é",
  potato: "–∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º",
  corn: "–∫—É–∫—É—Ä—É–∑–æ–π",
  tomato: "–ø–æ–º–∏–¥–æ—Ä–∞–º–∏",
  strawberry: "–∫–ª—É–±–Ω–∏–∫–∞–º–∏",
}

export const animalFeedResourceAmount: Record<AnimalType["type"], number> = {
  cow: 2,
  chicken: 1,
  sheep: 2,
  pig: 2,
  rabbit: 1,
  horse: 2,
}

const productEmoji = {
  milk: "ü•õ",
  eggs: "ü•ö",
  wool: "üß∂",
  meat: "üçñ",
}

const availableAnimals = [
  { type: "cow", price: 2000, description: "–î–∞–µ—Ç –º–æ–ª–æ–∫–æ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å" },
  { type: "chicken", price: 500, description: "–ù–µ—Å–µ—Ç —è–π—Ü–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å" },
  { type: "sheep", price: 1500, description: "–î–∞–µ—Ç —à–µ—Ä—Å—Ç—å –∫–∞–∂–¥—ã–µ 3 –¥–Ω—è" },
  { type: "pig", price: 1200, description: "–ë—ã—Å—Ç—Ä–æ —Ä–∞—Å—Ç–µ—Ç, –¥–∞–µ—Ç –º—è—Å–æ" },
  { type: "rabbit", price: 400, description: "–î–∞–µ—Ç –º—è—Å–æ –∏ –º–µ—Ö" },
  { type: "horse", price: 3000, description: "–£—Å–∫–æ—Ä—è–µ—Ç –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ" },
] as const

export function BarnDialog() {
  const [tab, setTab] = useState<"animals" | "market">("animals")
  const { animals, strokeAnimal, feedAnimal, collectProducts, buyAnimal } =
    useGameStore(state => state)

  const strokeAnimalHandler = (id: number) => {
    const error = strokeAnimal(id)
    if (!error) {
      toast.success("–í—ã –ø–æ–≥–ª–∞–¥–∏–ª–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ!", {
        description: (
          <span className='text-foreground'>–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!</span>
        ),
      })
    } else {
      toast.error(error)
    }
  }

  const feedAnimalHandler = (id: number) => {
    const error = feedAnimal(id)
    if (!error) {
      toast.success("–í—ã –ø–æ–∫–æ—Ä–º–∏–ª–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ!", {
        description: (
          <span className='text-foreground'>–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!</span>
        ),
      })
    } else {
      toast.error(error ?? "–í—ã —É–∂–µ –∫–æ—Ä–º–∏–ª–∏ —ç—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–µ —Å–µ–≥–æ–¥–Ω—è!")
    }
  }

  const collectProductsHandler = (id: number) => {
    const error = collectProducts(id)
    if (!error) {
      toast.success("–í—ã —Å–æ–±—Ä–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã!", {
        description: (
          <span className='text-foreground'>–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!</span>
        ),
      })
    } else {
      toast.error(error)
    }
  }

  const buyAnimalHandler = (animal: AnimalType["type"]) => {
    const error = buyAnimal(animal)

    if (!error) {
      setTab("animals")
      toast.success("–í—ã –∫—É–ø–∏–ª–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ!")
    } else {
      toast.error(error)
    }
  }

  return (
    <>
      <DialogHeader>
        <DialogTitle>–ê–º–±–∞—Ä - –£—Ö–æ–¥ –∑–∞ –∂–∏–≤–æ—Ç–Ω—ã–º–∏</DialogTitle>
        <DialogDescription>
          –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ –≤–∞—à–∏–º–∏ –∂–∏–≤–æ—Ç–Ω—ã–º–∏ –∏ —Å–æ–±–∏—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã
        </DialogDescription>
      </DialogHeader>

      <Tabs
        defaultValue='animals'
        value={tab}
        onValueChange={value => setTab(value as "animals" | "market")}
        className='mt-4'
      >
        <TabsList className='grid w-full grid-cols-2'>
          <TabsTrigger value='animals'>–ú–æ–∏ –∂–∏–≤–æ—Ç–Ω—ã–µ</TabsTrigger>
          <TabsTrigger value='market'>–ö—É–ø–∏—Ç—å –∂–∏–≤–æ—Ç–Ω—ã—Ö</TabsTrigger>
        </TabsList>

        <TabsContent value='animals' className='space-y-4 mt-2'>
          {animals.length > 0 ? (
            <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>
              {animals.map(animal => (
                <Card key={animal.id}>
                  <CardHeader className='p-4 pb-2'>
                    <div className='flex justify-between items-center'>
                      <CardTitle className='text-lg flex items-end gap-2'>
                        <span className='text-2xl'>
                          {animalEmoji[animal.type]}
                        </span>
                        {animalName[animal.type]}
                      </CardTitle>
                    </div>
                  </CardHeader>
                  <CardContent className='p-4 pt-0'>
                    <div className='space-y-3'>
                      <div>
                        <div className='flex justify-between mb-1 text-sm'>
                          <span>–ó–¥–æ—Ä–æ–≤—å–µ</span>
                          <span>{animal.health}%</span>
                        </div>
                        <Progress value={animal.health} className='h-2' />
                      </div>

                      <div>
                        <div className='flex justify-between mb-1 text-sm'>
                          <span>–ì–æ–ª–æ–¥</span>
                          <span>{animal.hunger}%</span>
                        </div>
                        <Progress value={animal.hunger} className='h-2' />
                      </div>

                      <div>
                        <div className='flex justify-between mb-1 text-sm'>
                          <span>–°—á–∞—Å—Ç—å–µ</span>
                          <span>{animal.happiness}%</span>
                        </div>
                        <Progress value={animal.happiness} className='h-2' />
                      </div>

                      {animal.product && (
                        <div className='flex justify-between items-center text-sm border-t pt-2 mt-2'>
                          <div className='flex items-center gap-1'>
                            <span>{productEmoji[animal.product]}</span>
                            <span>
                              {animalProduct[animal.product]}:{" "}
                              {animal.productAmount}
                            </span>
                          </div>
                        </div>
                      )}

                      <div className='flex items-center gap-2 pt-2'>
                        <TooltipProvider>
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <Button
                                size='sm'
                                variant='secondary'
                                className='flex-1'
                                onClick={() => strokeAnimalHandler(animal.id)}
                              >
                                <Hand />
                              </Button>
                            </TooltipTrigger>
                            <TooltipContent>–ü–æ–≥–ª–∞–¥–∏—Ç—å</TooltipContent>
                          </Tooltip>
                          <Tooltip delayDuration={0}>
                            <TooltipTrigger asChild>
                              <Button
                                size='sm'
                                variant='secondary'
                                className='flex-1'
                                onClick={() => feedAnimalHandler(animal.id)}
                              >
                                <Carrot />
                              </Button>
                            </TooltipTrigger>
                            <TooltipContent>
                              –ü–æ–∫–æ—Ä–º–∏—Ç—å{" "}
                              {resourceName[animalFeedResource[animal.type]]}{" "}
                              {animalFeedResourceAmount[animal.type]} —à—Ç—É–∫(–∏)
                            </TooltipContent>
                          </Tooltip>
                        </TooltipProvider>
                        {animal.product && animal.productAmount > 0 && (
                          <Button
                            size='sm'
                            className='flex-1'
                            onClick={() => collectProductsHandler(animal.id)}
                          >
                            –°–æ–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã
                          </Button>
                        )}
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          ) : (
            <div className='text-center py-8 text-muted-foreground'>
              <p className='mb-4'>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∂–∏–≤–æ—Ç–Ω—ã—Ö</p>
              <Button onClick={() => setTab("market")}>–ö—É–ø–∏—Ç—å –∂–∏–≤–æ—Ç–Ω—ã—Ö</Button>
            </div>
          )}
        </TabsContent>

        <TabsContent value='market' className='mt-2'>
          <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4'>
            {availableAnimals.map((animal, index) => (
              <Card key={index} className='flex flex-col'>
                <CardHeader className='p-4 pb-2'>
                  <CardTitle className='text-lg flex items-center gap-2'>
                    <span className='text-2xl'>{animalEmoji[animal.type]}</span>
                    <span className='capitalize'>
                      {animalName[animal.type]}
                    </span>
                  </CardTitle>
                  <CardDescription className='text-sm text-muted-foreground mb-4'>
                    {animal.description}
                  </CardDescription>
                </CardHeader>
                <CardContent className='p-4 pt-0 mt-auto'>
                  <div className='flex justify-between items-center'>
                    <span className='font-semibold'>{animal.price} –º–æ–Ω–µ—Ç</span>
                    <Button
                      size='sm'
                      onClick={() => buyAnimalHandler(animal.type)}
                    >
                      –ö—É–ø–∏—Ç—å
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>
      </Tabs>
    </>
  )
}
